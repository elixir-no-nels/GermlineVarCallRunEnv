#!/usr/bin/python

import os
import sys
import argparse
import subprocess
import time

# --- Args ---
parser = argparse.ArgumentParser(description="Docker Workflow wrapper")
parser.add_argument("-i", "--input_folder",     type=str, required=True, help="Path of the input  file")
parser.add_argument("-t", "--input_tsv",        type=str, required=True, help="Tab separated file with fastq info")
parser.add_argument("-o", "--output_folder",    type=str, required=True, help="Path of the output folder")
parser.add_argument("-r", "--reference",        type=str, required=True, help="Human genome referance : hg19, hg38")
parser.add_argument("-l", "--intervals",        type=str, required=False, default=False, help="Optional intevals file")
parser.add_argument("-p", "--preprocessing",    action='store_true', required=False, default=False, help="Run the preprocessing   part of the workflow")
parser.add_argument("-v", "--variantcalling",   action='store_true', required=False, default=False, help="Run the variant calling part of the workflow")

args = parser.parse_args()


# --- Functions ---
def run_workflow(docker_command):
  process = subprocess.Popen(docker_command, close_fds=True, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  while process.poll() is None:
    out = process.stdout.read(1)
    sys.stdout.write(out.decode('utf-8'))
    sys.stdout.flush()


def run_debug(command):
  print("Command :")
  print(command)
  print("")


def test_path(path):
  if os.path.isdir(path):
    return(True)
  else:
    print("Path {0} not found".format(path))
    exit()


def test_file(path):
  if os.path.isfile(path):
    return(True)
  else:
    print("File {0} not found".format(path))
    exit()


def is_absolute(path):
  if os.path.isabs(path):
    return(True)
  else:
    print("Path {0} is not absolute".format(path))
    exit()


def get_uid():
  process = subprocess.Popen('id -u'.split(), stdout=subprocess.PIPE)
  output, error = process.communicate()
  return output.strip()


def get_gid():
  process = subprocess.Popen('id -g'.split(), stdout=subprocess.PIPE)
  output, error = process.communicate()
  return output.strip()


def build_docker_command(input_d, input_tsv, output_d, reference_d, yaml_f, interval_f, tmp_dir, cust_env, user_id, container_id, name):
  rm_docker = '--rm'
  #rm_docker = ""
  # --- Build the command running inside the container ---
  command         = 'rbFlow.rb -r -c /Workflow/workflow.yaml'

  # intervals
  if interval_f != '' :
    interval_f = "-v={0}:/Workflow/interval_list.bed".format(interval_f)

  # --- Start the Container ---
  docker_command  = "\
  docker run -t \
  --rm {0} \
  {1} \
  {2} \
  -v={3}:/tmp \
  -v={4}:/Workflow/input \
  -v={5}:/Workflow/input.csv \
  -v={6}:/Workflow/workflow.yaml \
  -v={7}:/Workflow/output \
  -v={8}:/Workflow/references \
  {9} \
  -w=/Workflow \
  --name={10} {11} \
  sh -c \"{12}\" \
  ".format(cust_env, user_id, rm_docker, tmp_dir, input_d, input_tsv, yaml_f, output_d, reference_d, interval_f, name, container_id, command)
  return(docker_command)


# --- Test if user provided paths are valid , i.e. absolute and folders exists ---
is_absolute(args.input_tsv)
is_absolute(args.input_folder)
is_absolute(args.output_folder)
test_file(args.input_tsv)
test_path(args.input_folder)
test_path(args.output_folder)


# --- Config ---
container_id      = 'kjellptrsn/germlinevarcalldocker:develop'

member_group      = '2892' # p172-member-group

user_id           = get_uid()
group_id          = member_group  # get_gid()
custom_user_id    = "-u={0}:{1}".format(user_id,group_id)
custom_env        = '-e HOME=/tmp'

input_path        = args.input_folder
input_tsv         = args.input_tsv
output_path       = args.output_folder

run_tag           = int(time.time()*1000) # epoch time in millisecond as tag


# Manage Intervals
intervals = ''
if args.intervals != False :
  test_file(args.intervals)
  intervals = args.intervals


# Choose the reference to use
# Manually removed the prefix of the workflow dependent locations for now, these are in the hardcoded /tsd/p172 volume
reference_folder  = ''
prepros_yaml_file = ''
calling_yaml_file = ''
if (args.reference  == 'hg19' and args.intervals ):
  reference_folder  = '/tsd/p172/docker/reference-data/hg19'
  prepros_yaml_file = '/tsd/p172/development/GermlineVarCallRunEnv_hg38_hg19/preprocessing_hg19_intervals.yaml'
  calling_yaml_file = '/tsd/p172/development/GermlineVarCallRunEnv_hg38_hg19/germline_varcall_hg19_intervals.yaml'
elif (args.reference == 'hg38' and args.intervals ):
  reference_folder  = '/tsd/p172/docker/reference-data/hg38'
  prepros_yaml_file = '/tsd/p172/development/GermlineVarCallRunEnv_hg38_hg19/preprocessing_hg38_intervals.yaml'
  calling_yaml_file = '/tsd/p172/development/GermlineVarCallRunEnv_hg38_hg19/germline_varcall_hg38_intervals.yaml'
elif args.reference == 'hg19':
  reference_folder  = '/tsd/p172/docker/reference-data/hg19'
  prepros_yaml_file = '/tsd/p172/development/GermlineVarCallRunEnv_hg38_hg19/preprocessing_hg19.yaml'
  calling_yaml_file = '/tsd/p172/development/GermlineVarCallRunEnv_hg38_hg19/germline_varcall_hg19.yaml'
elif args.reference == 'hg38':
  reference_folder  = '/tsd/p172/docker/reference-data/hg38'
  prepros_yaml_file = '/tsd/p172/development/GermlineVarCallRunEnv_hg38_hg19/preprocessing_hg38.yaml'
  calling_yaml_file = '/tsd/p172/development/GermlineVarCallRunEnv_hg38_hg19/germline_varcall_hg38.yaml'
else:
  print('Error: reference must be hg19 or hg38')
  exit()

preprocessing_wf  = args.preprocessing
variantcalling_wf = args.variantcalling


# --- Create a tmp dir in the project area
tmp_dir = "{0}/germline_tmp_{1}".format(args.output_folder, run_tag)
print("Create tmp dir :")
print("mkdir -p {0}".format(tmp_dir))
os.system("mkdir -p {0}".format(tmp_dir))
os.system("chmod -R ugo+rwX {0}".format(tmp_dir))
os.system("chgrp {0} {1}".format(member_group, tmp_dir))


# --- Docker command
preprocessing_name   = "germline_preprocessing_{0}".format(run_tag)
variant_calling_name = "germline_variant_calling_{0}".format(run_tag)
docker_prepros = build_docker_command(input_path, input_tsv, output_path, reference_folder, prepros_yaml_file, intervals, tmp_dir, custom_env, custom_user_id, container_id, preprocessing_name)
docker_varcall = build_docker_command(input_path, input_tsv, output_path, reference_folder, calling_yaml_file, intervals, tmp_dir, custom_env, custom_user_id, container_id, variant_calling_name)


# --- Run ---
if (preprocessing_wf == False) and (variantcalling_wf == False) :
  print('Preprocessing or Variant calling needs to be selected\n  Use -p option for Preprocessing\n  Use -v option for variant calling\n  Use -p -v to run both of them')

if preprocessing_wf :
  print("Run preprocessing workflow, container tag is : {0}".format(run_tag))
  run_debug(docker_prepros)
  run_workflow(docker_prepros)

if variantcalling_wf :
  print("Run variant calling workflow, container tag is : {0}".format(run_tag))
  run_debug(docker_varcall)
  run_workflow(docker_varcall)

# clean tmp dir
#os.system("rm -rf {0}".format(tmp_dir))

# fix outputs permissions
os.system("chmod -R 775 {0}".format(output_path))
