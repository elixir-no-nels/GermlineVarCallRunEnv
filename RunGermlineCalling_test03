#!/usr/bin/python

import os
import sys
import argparse
import subprocess
import time



#--- Args ---

parser = argparse.ArgumentParser(description="Docker Workflow wrapper")
parser.add_argument("-l", "--list",   action='store_true', required=False, default=False, help="Get a list of all containers")
parser.add_argument("-i", "--images", action='store_true', required=False, default=False, help="Get a list of all images")
parser.add_argument("-d", "--delete", type=str, required=False, help="Delete a container (stop it if needed)")

args = parser.parse_args()

if len(sys.argv[1:])==0:
    parser.print_help()
    # parser.print_usage() # for just the usage line
    parser.exit()
#if args.list == False and args.images == False and args.delete == None :
#  print(parser.format_usage)

#--- Functions ---


def run_cmd(command):
  pro = subprocess.Popen(command, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
  out, err = pro.communicate(cmd)
  pro.wait()
  #print(out)
  #print(err)
  return(out)


def run_debug(command):
  print("Command :")
  print(command)
  print("")


#--- Actions ---

if args.list != False:
  cmd = "docker ps -a"
  out = run_cmd(cmd)
  print(out)

if args.images != False:
  cmd = "docker images"
  out = run_cmd(cmd)
  print(out)

if args.delete != None:
  cmd = "docker inspect {0}".format(args.delete)
  if bool(set(run_cmd(cmd)) & set("\"Running\": true")):
    print("Stop the container")
    cmd = "docker stop {0}".format(args.delete)
    run_cmd(cmd)
  print("Remove the container and associated volumes")
  cmd = "docker rm -v {0}".format(args.delete)
  run_cmd(cmd)



